// <auto-generated />
using System;
using ClinicaOptica.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ClinicaOptica.Infrastructure.Migrations
{
    [DbContext(typeof(OpticaDbContext))]
    partial class OpticaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.AgudezaVisual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ConRxCercaOD")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ConRxCercaOI")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ConRxLejosOD")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ConRxLejosOI")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<int>("ConsultaId")
                        .HasColumnType("integer");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SinRxCercaOD")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("SinRxCercaOI")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("SinRxLejosOD")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("SinRxLejosOI")
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId")
                        .IsUnique();

                    b.ToTable("AgudezaVisual", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Antecedentes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ConsultaId")
                        .HasColumnType("integer");

                    b.Property<string>("HeredoFamiliares")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("NoPatologicos")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PadecimientoActual")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Patologicos")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Prediagnostico")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId")
                        .IsUnique();

                    b.ToTable("Antecedentes", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Cita", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Duracion")
                        .HasColumnType("integer");

                    b.Property<string>("Estado")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<TimeSpan>("Hora")
                        .HasColumnType("interval");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("OptometristaId")
                        .HasColumnType("integer");

                    b.Property<int>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("OptometristaId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Citas", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Consulta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("DiagnosticoId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("OptometristaId")
                        .HasColumnType("integer");

                    b.Property<int>("PacienteId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DiagnosticoId");

                    b.HasIndex("OptometristaId");

                    b.HasIndex("PacienteId");

                    b.ToTable("Consultas", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Diagnostico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("PlanTratamiento")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Pronostico")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.ToTable("Diagnosticos", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Lensometria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CilindroOD")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CilindroOI")
                        .HasColumnType("numeric");

                    b.Property<int>("ConsultaId")
                        .HasColumnType("integer");

                    b.Property<int?>("EjeOD")
                        .HasColumnType("integer");

                    b.Property<int?>("EjeOI")
                        .HasColumnType("integer");

                    b.Property<decimal?>("EsferaOD")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EsferaOI")
                        .HasColumnType("numeric");

                    b.Property<string>("Material")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TipoBifocal")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId")
                        .IsUnique();

                    b.ToTable("Lensometria", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.LogActividad", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Descripcion")
                        .HasColumnType("text");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("LogsActividad", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Notificaciones", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Optometrista", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CedulaProfesional")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Correo")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Especialidad")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int>("UsuarioId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CedulaProfesional")
                        .IsUnique();

                    b.HasIndex("Correo")
                        .IsUnique();

                    b.HasIndex("UsuarioId")
                        .IsUnique();

                    b.ToTable("Optometristas", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Paciente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Domicilio")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("Edad")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Escolaridad")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EstadoCivil")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Genero")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Ocupacion")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<int?>("TutorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TutorId");

                    b.ToTable("Pacientes", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Permiso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Permisos", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activo")
                        .HasColumnType("boolean");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Precio")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Productos", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.RecetaFinal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ADD")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("CilindroOD")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CilindroOI")
                        .HasColumnType("numeric");

                    b.Property<int>("ConsultaId")
                        .HasColumnType("integer");

                    b.Property<string>("DI")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int?>("EjeOD")
                        .HasColumnType("integer");

                    b.Property<int?>("EjeOI")
                        .HasColumnType("integer");

                    b.Property<decimal?>("EsferaOD")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EsferaOI")
                        .HasColumnType("numeric");

                    b.Property<string>("Material")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Prismas")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Tratamiento")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId")
                        .IsUnique();

                    b.ToTable("RecetaFinal", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Refraccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<decimal?>("CilindroOD")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("CilindroOI")
                        .HasColumnType("numeric");

                    b.Property<int>("ConsultaId")
                        .HasColumnType("integer");

                    b.Property<int?>("EjeOD")
                        .HasColumnType("integer");

                    b.Property<int?>("EjeOI")
                        .HasColumnType("integer");

                    b.Property<decimal?>("EsferaOD")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("EsferaOI")
                        .HasColumnType("numeric");

                    b.Property<string>("EstadoRefractivo")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Queratometria")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("ConsultaId")
                        .IsUnique();

                    b.ToTable("Refraccion", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Rol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Tutor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RelacionConPaciente")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasKey("Id");

                    b.ToTable("Tutor");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("RolId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("RolId");

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Usuarios", (string)null);
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Venta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("PacienteId")
                        .HasColumnType("integer");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("numeric");

                    b.Property<int>("ProductoId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("PacienteId");

                    b.HasIndex("ProductoId");

                    b.ToTable("Ventas", (string)null);
                });

            modelBuilder.Entity("PermisoRol", b =>
                {
                    b.Property<int>("PermisosId")
                        .HasColumnType("integer");

                    b.Property<int>("RolesId")
                        .HasColumnType("integer");

                    b.HasKey("PermisosId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("PermisoRol");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.AgudezaVisual", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Consulta", "Consulta")
                        .WithOne("AgudezaVisual")
                        .HasForeignKey("ClinicaOptica.Domain.ClasesOptica.AgudezaVisual", "ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Antecedentes", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Consulta", "Consulta")
                        .WithOne("Antecedentes")
                        .HasForeignKey("ClinicaOptica.Domain.ClasesOptica.Antecedentes", "ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Cita", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Optometrista", "Optometrista")
                        .WithMany()
                        .HasForeignKey("OptometristaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Paciente", "Paciente")
                        .WithMany("Citas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Optometrista");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Consulta", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Diagnostico", "Diagnostico")
                        .WithMany()
                        .HasForeignKey("DiagnosticoId");

                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Optometrista", "Optometrista")
                        .WithMany("Consultas")
                        .HasForeignKey("OptometristaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Paciente", "Paciente")
                        .WithMany("Consultas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Diagnostico");

                    b.Navigation("Optometrista");

                    b.Navigation("Paciente");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Lensometria", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Consulta", "Consulta")
                        .WithOne("Lensometria")
                        .HasForeignKey("ClinicaOptica.Domain.ClasesOptica.Lensometria", "ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.LogActividad", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Notificacion", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Optometrista", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Usuario", "Usuario")
                        .WithOne("Optometrista")
                        .HasForeignKey("ClinicaOptica.Domain.ClasesOptica.Optometrista", "UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Paciente", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Tutor", "Tutor")
                        .WithMany("Pacientes")
                        .HasForeignKey("TutorId");

                    b.Navigation("Tutor");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.RecetaFinal", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Consulta", "Consulta")
                        .WithOne("RecetaFinal")
                        .HasForeignKey("ClinicaOptica.Domain.ClasesOptica.RecetaFinal", "ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Refraccion", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Consulta", "Consulta")
                        .WithOne("Refraccion")
                        .HasForeignKey("ClinicaOptica.Domain.ClasesOptica.Refraccion", "ConsultaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consulta");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Usuario", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Rol", "Rol")
                        .WithMany("Usuarios")
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Rol");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Venta", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Paciente", "Paciente")
                        .WithMany("Ventas")
                        .HasForeignKey("PacienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Producto", "Producto")
                        .WithMany("Ventas")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Paciente");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("PermisoRol", b =>
                {
                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Permiso", null)
                        .WithMany()
                        .HasForeignKey("PermisosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ClinicaOptica.Domain.ClasesOptica.Rol", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Consulta", b =>
                {
                    b.Navigation("AgudezaVisual");

                    b.Navigation("Antecedentes");

                    b.Navigation("Lensometria");

                    b.Navigation("RecetaFinal");

                    b.Navigation("Refraccion");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Optometrista", b =>
                {
                    b.Navigation("Consultas");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Paciente", b =>
                {
                    b.Navigation("Citas");

                    b.Navigation("Consultas");

                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Producto", b =>
                {
                    b.Navigation("Ventas");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Rol", b =>
                {
                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Tutor", b =>
                {
                    b.Navigation("Pacientes");
                });

            modelBuilder.Entity("ClinicaOptica.Domain.ClasesOptica.Usuario", b =>
                {
                    b.Navigation("Optometrista");
                });
#pragma warning restore 612, 618
        }
    }
}
